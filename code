( data_processing.py )
import os
import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator

def load_data(train_dir, test_dir, img_size=(224, 224)):
    datagen = ImageDataGenerator(rescale=1./255)
    
    train_data = datagen.flow_from_directory(
        train_dir,
        target_size=img_size,
        class_mode='categorical',
        batch_size=32
    )

    test_data = datagen.flow_from_directory(
        test_dir,
        target_size=img_size,
        class_mode='categorical',
        batch_size=32
    )

    return train_data, test_data

 ( model.py)
  from tensorflow.keras import layers, models

def create_model(input_shape=(224, 224, 3), num_classes=5):
    model = models.Sequential()
    model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape))
    model.add(layers.MaxPooling2D(pool_size=(2, 2)))
    model.add(layers.Conv2D(64, (3, 3), activation='relu'))
    model.add(layers.MaxPooling2D(pool_size=(2, 2)))
    model.add(layers.Conv2D(128, (3, 3), activation='relu'))
    model.add(layers.MaxPooling2D(pool_size=(2, 2)))
    model.add(layers.Flatten())
    model.add(layers.Dense(128, activation='relu'))
    model.add(layers.Dense(num_classes, activation='softmax'))
    return model

 (train.py)
  import tensorflow as tf
from data_preprocessing import load_data
from model import create_model

def train_model(train_dir, test_dir, epochs=10):
    train_data, test_data = load_data(train_dir, test_dir)
    
    model = create_model(num_classes=len(train_data.class_indices))
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

    model.fit(train_data, validation_data=test_data, epochs=epochs)
    model.save('models/model.h5')

if __name__ == '__main__':
    train_model('data/train/', 'data/test/', epochs=10)

 ( Predict.py ) :-
  
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

def predict_image(model_path, img_path):
    model = load_model(model_path)

    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    predictions = model.predict(img_array)
    return np.argmax(predictions)

if __name__ == '__main__':
    result = predict_image('models/model.h5', 'path_to_your_image.jpg')
    print(f'Predicted class: {result}')
  
  
